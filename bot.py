import os
import re
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

TOKEN = os.environ["BOT_TOKEN"]

# --- –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ ---
def escape(text: str) -> str:
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return ''.join(f"\\{c}" if c in escape_chars else c for c in text)


actions = {
    "/–æ–±–Ω—è—Ç—å": "–æ–±–Ω—è–ª–∞",
    "/—á–º–æ–∫–Ω—É—Ç—å": "—á–º–æ–∫–Ω—É–ª–∞",
    "/–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª–∞",
    "/–ø–æ–≥–ª–∞–¥–∏—Ç—å": "–ø–æ–≥–ª–∞–¥–∏–ª–∞",
    "/—à–ª–µ–ø–Ω—É—Ç—å": "—à–ª—ë–ø–Ω—É–ª–∞",
    "/—É–¥–∞—Ä–∏—Ç—å": "—É–¥–∞—Ä–∏–ª–∞",
    "/–ø–æ—â–µ—á–∏–Ω–∞": "–¥–∞–ª–∞ –ø–æ—â—ë—á–∏–Ω—É",
    "/–ª–∏–∑–Ω—É—Ç—å": "–ª–∏–∑–Ω—É–ª–∞",
    "/–ø–æ—Ö–≤–∞–ª–∏—Ç—å": "–ø–æ—Ö–≤–∞–ª–∏–ª–∞",
    "/–∫—É—Å—å": "–∫—É—Å—å–Ω—É–ª–∞",
    "/–ø—Ä–∏–∂–∞—Ç—å": "–ø—Ä–∏–∂–∞–ª–∞ –∫ —Å—Ç–µ–Ω–µ",
    "/–≤—Å—Ç–∞—Ç—å–Ω–∞–∫–æ–ª–µ–Ω–∏": "–≤—Å—Ç–∞–ª–∞ –Ω–∞ –∫–æ–ª–µ–Ω–∏ –ø–µ—Ä–µ–¥",
    "/—Å–µ—Å—Ç—å–Ω–∞–ª–∏—Ü–æ": "—Å–µ–ª–∞ –Ω–∞ –ª–∏—Ü–æ",
    "/—Å–µ—Å—Ç—å–Ω–∞–∫–æ–ª–µ–Ω–∏": "—Å–µ–ª–∞ –Ω–∞ –∫–æ–ª–µ–Ω–∏",
    "/–æ–±–ª–∞–ø–∞—Ç—å": "–æ–±–ª–∞–ø–∞–ª–∞",
    "/—Ç—Ä–∞—Ö–Ω—É—Ç—å": "—Ç—Ä–∞—Ö–Ω—É–ª–∞",
    "/–≤—ã–µ–±–∞—Ç—å": "–≤—ã–µ–±–∞–ª–∞",
    "/—Å–µ–∫—Å–∏—Ç—å": "–Ω–µ–∂–Ω–æ —Å–µ–∫—Å–∏—Ç —Å",
    "/–æ—Ç–ª–∏–∑–∞—Ç—å": "–æ—Ç–ª–∏–∑–∞–ª–∞",
    "/–æ—Ç—Å—Ç—Ä–∞–ø–æ–Ω–∏—Ç—å": "–æ—Ç—Å—Ç—Ä–∞–ø–æ–Ω–∏–ª–∞",
    "/–Ω–æ–∂–Ω–∏—Ü—ã": "–ø–æ—Ç—ë—Ä–ª–∞—Å—å –ø–∏—Å–µ–π —Å",
    "/–ø–Ω—É—Ç—å": "–ø–Ω—É–ª–∞",
    "/–ø–æ–∫–æ—Ä–º–∏—Ç—å": "–ø–æ–∫–æ—Ä–º–∏–ª–∞",
    "/–ø—Ä–∏–ø–æ–¥–Ω—è—Ç—å": "–ø—Ä–∏–ø–æ–¥–Ω—è–ª–∞",
    "/—É–∫—É—Å–∏—Ç—å": "—É–∫—É—Å–∏–ª–∞",
    "/—Å–æ–∂—Ä–∞—Ç—å": "—Å–æ–∂—Ä–∞–ª–∞",
    "/–æ—Ç–æ–¥—Ä–∞—Ç—å": "–æ—Ç–æ–¥—Ä–∞–ª–∞",
    "/–º–æ—Ä–¥–∞—Ç—å": "–º–æ—Ä–¥–∞–Ω—É–ª–∞",
    "/–∑–∞–ø–µ—Ä–µ—Ç—å": "–∑–∞–ø–µ—Ä–ª–∞ –≤ –ø–æ–¥–≤–∞–ª–µ",
    "/–∑–∞–±—É–ª–ª–∏—Ç—å": "–∑–∞–±—É–ª–ª–∏–ª–∞",
    "/–ø–æ–¥—Ä–æ—á–∏—Ç—å": "–ø–æ–¥—Ä–æ—á–∏–ª–∞",
    "/–ø—Ä–æ–±–∫–∞": "–≤—Å—Ç–∞–≤–∏–ª–∞ –ø—Ä–æ–±–∫—É –≤",
    "/–ø–æ–ø–∏—Å–∏—Ç—å": "–ø–æ–ø–∏—Å–∏–ª–∞ –≤–º–µ—Å—Ç–µ —Å",
    "/–ø–æ–∫–∞–∫–∞—Ç—å": "–ø–æ–∫–∞–∫–∞–ª–∞ –≤–º–µ—Å—Ç–µ —Å",
    "/–≤–∏–±—Ä–∞—Ç–æ—Ä": "–≤–∫–ª—é—á–∏–ª–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –≤–∏–±—Ä–∞—Ç–æ—Ä",
    "/–ø–æ—Å—Ç–æ–Ω–∞—Ç—å": "–ø–æ—Å—Ç–æ–Ω–∞–ª–∞ –Ω–∞ —É—à–∫–æ",
    "/–ø–∏—Å–∫–∞": "–¥–∞–ª–∞ –ø–∏—Å–∫—É —Ä–∏—Å–∞",
    "/–Ω–µ—Ç–ø–∏—Å–∫–∞": "–æ—Ç–æ–±—Ä–∞–ª–∞ –ø–∏—Å–∫—É —Ä–∏—Å–∞",
    "/—É–±–∞—é–∫–∞—Ç—å": "—É–±–∞—é–∫–∞–ª–∞",
    "/–Ω–∞–≥–Ω—É—Ç—å": "–ø–æ—Å—Ç–∞–≤–∏–ª–∞ —Ä–∞–∫–æ–º",
    "/–æ—Ç—à–ª–µ–ø–∞—Ç—å": "–æ—Ç—à–ª—ë–ø–∞–ª–∞",
    "/–æ—Ç—Å–æ—Å–∞—Ç—å": "–æ—Ç—Å–æ—Å–∞–ª–∞",
    "/—Å–≤—è–∑–∞—Ç—å": "—Å–≤—è–∑–∞–ª–∞",
    "/–æ—Ç–º—É–¥–æ—Ö–∞—Ç—å": "–æ—Ç–º—É–¥–æ—Ö–∞–ª–∞",
    "/–æ—Ç–ø–∏–∑–¥–∏—Ç—å": "–æ—Ç–ø–∏–∑–¥–∏–ª–∞",
    "/—Å—Ä–∞—á": "—É—Å—Ç—Ä–æ–∏–ª–∞ —Å—Ä–∞—á —Å",
    "/–º–µ—Ç": "–¥–∞–ª–∞ –ø–∞–∫–µ—Ç–∏–∫ –º–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω–∞",
    "/–º–µ—Ñ": "–¥–∞–ª–∞ –ø–∞–∫–µ—Ç–∏–∫ –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞",
    "/–∫–æ–∫—Å": "–¥–∞–ª–∞ –ø–∞–∫–µ—Ç–∏–∫ –∫–æ–∫–∞–∏–Ω–∞",
    "/–≥–µ—Ä—ã—á": "–¥–∞–ª–∞ –ø–∞–∫–µ—Ç–∏–∫ –≥–µ—Ä–æ–∏–Ω–∞",
    "/–ø–æ–∂–∞–º–∫–∞—Ç—å": "–ø–æ–∂–∞–º–∫–∞–ª–∞",
    "/—Å–∏—Å—è": "–ø–æ–º–∞—Ü–∞–ª–∞ –∑–∞ —Å–∏—Å—é",
    "/–ø–æ–ø–∞": "–ø–æ–º—è–ª–∞ –∂–æ–ø—É",
    "/—Ñ–∏—Å—Ç–∏–Ω–≥": "–∑–∞–ø–∏—Ö–Ω—É–ª–∞ —Ä—É–∫—É –ø–æ —Å–∞–º—ã–π –ª–æ–∫–æ—Ç—å –≤ –∂–æ–ø—É",
    "/–≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å": "–≤–æ—Å–∫—Ä–µ—Å–∏–ª–∞",
    "/–æ–±–æ—Å—Å–∞—Ç—å": "–æ–±–æ—Å—Å–∞–ª–∞",
    "/–æ–±–æ—Å—Ä–∞—Ç—å": "–æ–±–æ—Å—Ä–∞–ª–∞",
    "/–ø–æ–Ω—é—Ö–∞—Ç—å": "–ø–æ–Ω—é—Ö–∞–ª–∞",
    "/–∑–∞–Ω—é—Ö–∞—Ç—å": "–∑–∞–Ω—é—Ö–∞–ª–∞",
    "/–∑–∞–∫—É—Ä–∏—Ç—å": "–∑–∞–∫—É—Ä–∏–ª–∞",
    "/—Å–∏–≥–∞—Ä–µ—Ç–∞": "–ø–æ—Ç—É—à–∏–ª–∞ —Å–∏–≥–∞—Ä–µ—Ç—É –æ–±",
    "/–Ω–∞–∫–∞–∑–∞—Ç—å": "–Ω–∞–∫–∞–∑–∞–ª–∞",
    "/–≤—ã–ø–æ—Ä–æ—Ç—å": "–≤—ã–ø–æ—Ä–æ–ª–∞",
    "/—É–±–∏—Ç—å": "—É–±–∏–ª–∞",
    "/–∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å": "–∑–∞—Å—Ç—Ä–µ–ª–∏–ª–∞",
    "/–≤—Ä–æ—Ç": "–ø–ª—é–Ω—É–ª–∞ –≤ —Ä–æ—Ç",
    "/–ø—Ä–∏–¥—É—à–∏—Ç—å": "–ø—Ä–∏–¥—É—à–∏–ª–∞",
    "/–¥–∞—Ç—å": "–¥–∞–ª–∞",
    "/–∑–∞–±—Ä–∞—Ç—å": "–∑–∞–±—Ä–∞–ª–∞",
    "/–æ—Ç–æ–±—Ä–∞—Ç—å": "–æ—Ç–æ–±—Ä–∞–ª–∞",
    "/–ª—é–±–∏—Ç—å": "–ª—é–±–∏—Ç",
    "/–±–∞–Ω": "–∑–∞–±–∞–Ω–∏–ª–∞",
    "/–≤—ã–≥–Ω–∞—Ç—å": "–≤—ã–≥–Ω–∞–ª–∞ –∏–∑ —á–∞—Ç–∞",
    "/–≤—É–≥–æ–ª": "–ø–æ—Å—Ç–∞–≤–∏–ª–∞ –≤ —É–≥–æ–ª",
    "/–ø–æ–¥—É—à–∫–∞": "–ø–æ–ª–æ–∂–∏–ª–∞ –ø–æ–¥—É—à–∫—É –ø–æ–¥ –∫–æ–ª–µ–Ω–∏",
    }
    
self_actions = {
        "/—É–º–µ—Ä–µ—Ç—å": "–≤–Ω–µ–∑–∞–ø–Ω–æ —É–º–µ—Ä–ª–∞",
        "/—Å—É–∏—Ü–∏–¥": "—Å–æ–≤–µ—Ä—à–∏–ª–∞ —Å—É–∏—Ü–∏–¥",
        "/–∑–∞—Å–Ω—É—Ç—å": "—É—Å–Ω—É–ª–∞",
        "/—É–ª–µ—Ç–µ—Ç—å": "—É–ª–µ—Ç–µ–ª–∞ –≤ –∫–æ—Å–º–æ—Å",
        "/–æ–∫–Ω–æ": "–≤—ã—à–ª–∞ –≤ –æ–∫–Ω–æ",
        "/–∫–æ–Ω—á–∏—Ç—å": "–∫–æ–Ω—á–∏–ª–∞",
        "/–ø–æ–∫—É—à–∞—Ç—å": "–ø–æ–∫—É—à–∞–ª–∞",
        "/–ø–æ–µ—Å—Ç—å": "–ø–æ–µ–ª–∞",
        "/–ø–æ–ø–∏—Ç—å": "–ø–æ–ø–∏–ª–∞",
        "/–≤—ã–ø–∏—Ç—å": "–≤—ã–ø–∏–ª–∞",
        "/–∑–∏–≥–∞": "–ø–ª–æ—Ç–Ω–æ –ø–æ—Ç—è–Ω—É–ª–∞—Å—å –∫ —Å–æ–ª–Ω—Ü—É",
        "/–Ω–∞–∫–æ–ª–µ–Ω–∏": "–≤—Å—Ç–∞–ª–∞ –Ω–∞ –∫–æ–ª–µ–Ω–∏",
    }



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = escape(user.first_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, [{name}](tg://user?id={user.id})! üëã\n"
        "–Ø —Ä–∞–± –ø–∞—Ä—Ç–∏–∏ –§–µ–º–£–ú, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–∏—Å–ª—É–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏–º —Ö–æ–∑—è–π–∫–∞–º. –ì–æ—Å–ø–æ–∂–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä–æ–¥–µ:\n"
        "`/–æ–±–Ω—è—Ç—å`, `/–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å`, `/—É–¥–∞—Ä–∏—Ç—å`, `/—É–º–µ—Ä–µ—Ç—å`, –∏ –¥—Ä—É–≥–∏–µ.",
        parse_mode="MarkdownV2"
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    command = text.split()[0]

    # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è
    sender_name = escape(update.effective_user.first_name)
    sender = f"[{sender_name}](tg://user?id={update.effective_user.id})"

    # --- –°–∞–º–æ-–¥–µ–π—Å—Ç–≤–∏—è ---
    if command in self_actions:
        action_text = self_actions[command]
        await update.message.reply_text(
            f"{sender} {action_text}",
            parse_mode="MarkdownV2"
        )
        return

    # --- –î–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–ª—å—é ---
    if command in actions:
        action_verb = actions[command]

    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    words = text.split()[1:]
    target = None
    extra = ""

    # 1. –ò—â–µ–º @—é–∑–µ—Ä–∞
    for i, word in enumerate(words):
        if word.startswith("@"):
            target = word
            extra = " ".join(words[:i])  # –≤—Å—ë –¥–æ @
            break

    # 2. –ï—Å–ª–∏ reply
    if not target and update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_name = escape(target_user.first_name)
        target = f"[{target_name}](tg://user?id={target_user.id})"
        extra = " ".join(words)

    # 3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ —Ü–µ–ª—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
    if not target and words:
        target = escape(words[-1])
        extra = " ".join(words[:-1])

    # 4. –ù–∏–∫–æ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏
    if not target:
        target = "–≤—Å–µ—Ö ü´Ç"
        extra = " ".join(words)

    # –°–æ–æ–±—â–µ–Ω–∏–µ
    full_action = f"{action_verb} {escape(extra)}".strip()
    await update.message.reply_text(
        f"{sender} {full_action} {target}",
        parse_mode="MarkdownV2"
    )


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = ApplicationBuilder().token(TOKEN).build()
print("Start handler –¥–æ–±–∞–≤–ª–µ–Ω")
app.add_handler(CommandHandler("start", start_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

app.run_polling()
